{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jorge\\\\OneDrive\\\\Escritorio\\\\react\\\\Basico\\\\BuscadorPeliculas\\\\Buscador\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n//import logo from './logo.svg';\nimport React, { useEffect, useState } from 'react';\nimport { Buscador } from './Buscador';\nimport { Categorias } from './Categorias';\nimport { PeliculasList } from './PeliculasList';\nimport { Peliculas } from './Peliculas';\nimport { fetchMovies } from './servicio';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet defaultPelis = [{\n  text: \"Avengers: Endgame\",\n  complete: true\n}, {\n  text: \"super mario movie\",\n  complete: true\n}, {\n  text: \"scream 5\",\n  complete: false\n}];\nfunction App() {\n  _s();\n  const [searchValue, setSearchValue] = React.useState('');\n  console.log('pruebas del buscador ' + searchValue);\n  const [movies, setMovies] = useState([]);\n  const [categoriaSeleccionada, setCategoriaSeleccionada] = useState('Todos'); // Estado para la categoría seleccionada\n\n  ///////////////////////////////////////////////////\n  const [shows, setShows] = useState([]);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    fetchShows();\n  }, []); // Empty dependency array to run the effect only once on mount\n\n  const fetchShows = async () => {\n    try {\n      const response1 = await fetch(`https://api.tvmaze.com/search/shows?q=series`);\n      const response2 = await fetch(`https://api.tvmaze.com/search/shows?q=movies`);\n      if (!response1.ok || !response2.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data1 = await response1.json();\n      const data2 = await response2.json();\n      const combinedShows = [...data1, ...data2]; // Combine results of series and movies\n      setShows(combinedShows.map(show => ({\n        ...show,\n        show: {\n          ...show.show,\n          summary: stripHtmlTags(show.show.summary) // Limpiar etiquetas HTML del resumen\n        }\n      })));\n      setError('');\n    } catch (error) {\n      setError('There was a problem fetching the data.');\n      setShows([]);\n    }\n  };\n  console.log(\"shows \" + JSON.stringify(shows));\n  const stripHtmlTags = htmlString => {\n    // Crear un elemento HTML temporal para eliminar las etiquetas\n    const tempDiv = document.createElement('div');\n    tempDiv.innerHTML = htmlString;\n    return tempDiv.textContent || tempDiv.innerText || ''; // Obtener el texto sin etiquetas\n  };\n  const categorias = categoria => {\n    setCategoriaSeleccionada(categoria); // Función para actualizar la categoría seleccionada\n    console.log(\"categoria\" + JSON.stringify(categoria));\n  };\n  const filtrado = shows.filter(show => {\n    // Filtrar por categoría seleccionada\n    if (categoriaSeleccionada === 'Todos') {\n      return true && show.show.name.toLowerCase().includes(searchValue.toLowerCase()); // Mostrar todos si la categoría seleccionada es 'Todos'\n    } else {\n      return show.show.genres && show.show.genres.includes(categoriaSeleccionada) && show.show.name.toLowerCase().includes(searchValue.toLowerCase());\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Buscador, {\n      searchValue: searchValue,\n      setSearchValue: setSearchValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Categorias, {\n      seleccionarCategoria: categorias\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PeliculasList, {\n      children: /*#__PURE__*/_jsxDEV(Peliculas, {\n        shows: filtrado\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"4On/EpCUtGEXX2G3xtkiJf+dsik=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Buscador","Categorias","PeliculasList","Peliculas","fetchMovies","jsxDEV","_jsxDEV","defaultPelis","text","complete","App","_s","searchValue","setSearchValue","console","log","movies","setMovies","categoriaSeleccionada","setCategoriaSeleccionada","shows","setShows","error","setError","fetchShows","response1","fetch","response2","ok","Error","data1","json","data2","combinedShows","map","show","summary","stripHtmlTags","JSON","stringify","htmlString","tempDiv","document","createElement","innerHTML","textContent","innerText","categorias","categoria","filtrado","filter","name","toLowerCase","includes","genres","Fragment","children","fileName","_jsxFileName","lineNumber","columnNumber","seleccionarCategoria","_c","$RefreshReg$"],"sources":["C:/Users/jorge/OneDrive/Escritorio/react/Basico/BuscadorPeliculas/Buscador/src/App.js"],"sourcesContent":["//import logo from './logo.svg';\nimport React, { useEffect, useState } from 'react';\nimport { Buscador } from './Buscador';\nimport { Categorias } from './Categorias';\nimport { PeliculasList } from './PeliculasList';\nimport { Peliculas } from './Peliculas';\nimport { fetchMovies } from './servicio';\nimport './App.css';\n\nlet defaultPelis = [\n\n  { text: \"Avengers: Endgame\", complete: true },\n  { text: \"super mario movie\", complete: true },\n  { text: \"scream 5\", complete: false },\n\n]\n\nfunction App() {\n  const [searchValue, setSearchValue] = React.useState('');\n\n  console.log('pruebas del buscador '+ searchValue);\n  \n  const [movies, setMovies] = useState([]);\n  const [categoriaSeleccionada, setCategoriaSeleccionada] = useState('Todos'); // Estado para la categoría seleccionada\n  \n ///////////////////////////////////////////////////\n const [shows, setShows] = useState([]);\n const [error, setError] = useState('');\n\n useEffect(() => {\n     fetchShows();\n }, []); // Empty dependency array to run the effect only once on mount\n\n const fetchShows = async () => {\n     try {\n         const response1 = await fetch(`https://api.tvmaze.com/search/shows?q=series`);\n         const response2 = await fetch(`https://api.tvmaze.com/search/shows?q=movies`);\n         if (!response1.ok || !response2.ok) {\n             throw new Error('Network response was not ok');\n         }\n         const data1 = await response1.json();\n         const data2 = await response2.json();\n         const combinedShows = [...data1, ...data2]; // Combine results of series and movies\n         setShows(combinedShows.map(show => ({\n             ...show,\n             show: {\n                 ...show.show,\n                 summary: stripHtmlTags(show.show.summary) // Limpiar etiquetas HTML del resumen\n             }\n         })));\n         setError('');\n     } catch (error) {\n         setError('There was a problem fetching the data.');\n         setShows([]);\n     }\n };\n\n console.log(\"shows \" + JSON.stringify(shows));\n\n const stripHtmlTags = (htmlString) => {\n     // Crear un elemento HTML temporal para eliminar las etiquetas\n     const tempDiv = document.createElement('div');\n     tempDiv.innerHTML = htmlString;\n     return tempDiv.textContent || tempDiv.innerText || ''; // Obtener el texto sin etiquetas\n };\n\n\n  \n const categorias = (categoria) => {\n  setCategoriaSeleccionada(categoria); // Función para actualizar la categoría seleccionada\n  console.log(\"categoria\" + JSON.stringify(categoria));\n};\n\nconst filtrado = shows.filter(\n  show => {\n    // Filtrar por categoría seleccionada\n    if (categoriaSeleccionada === 'Todos') {\n      return true && show.show.name.toLowerCase().includes(searchValue.toLowerCase()); // Mostrar todos si la categoría seleccionada es 'Todos'\n    } else {\n      return show.show.genres && show.show.genres.includes(categoriaSeleccionada) && show.show.name.toLowerCase().includes(searchValue.toLowerCase());\n    }\n  }\n);\n\n\n\n  return (\n    <React.Fragment>\n\n      <Buscador \n        searchValue={searchValue}\n        setSearchValue={setSearchValue}\n      />  \n\n      <Categorias seleccionarCategoria ={categorias} />     \n\n      <PeliculasList>    \n   \n          <Peliculas  shows={filtrado}/>  \n    \n      </PeliculasList>    \n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}