{"ast":null,"code":"//import logo from './logo.svg';\nimport React,{useEffect,useState}from'react';import{Buscador}from'./Buscador';import{Categorias}from'./Categorias';import{PeliculasList}from'./PeliculasList';import{Peliculas}from'./Peliculas';import{fetchMovies}from'./servicio';import'./App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";let defaultPelis=[{text:\"Avengers: Endgame\",complete:true},{text:\"super mario movie\",complete:true},{text:\"scream 5\",complete:false}];function App(){const[searchValue,setSearchValue]=React.useState('');console.log('pruebas del buscador '+searchValue);const[movies,setMovies]=useState([]);const[categoriaSeleccionada,setCategoriaSeleccionada]=useState('Todos');// Estado para la categoría seleccionada\n///////////////////////////////////////////////////\nconst[shows,setShows]=useState([]);const[error,setError]=useState('');useEffect(()=>{fetchShows();},[]);// Empty dependency array to run the effect only once on mount\nconst fetchShows=async()=>{try{const response1=await fetch(\"https://api.tvmaze.com/search/shows?q=series\");const response2=await fetch(\"https://api.tvmaze.com/search/shows?q=movies\");if(!response1.ok||!response2.ok){throw new Error('Network response was not ok');}const data1=await response1.json();const data2=await response2.json();const combinedShows=[...data1,...data2];// Combine results of series and movies\nsetShows(combinedShows.map(show=>({...show,show:{...show.show,summary:stripHtmlTags(show.show.summary)// Limpiar etiquetas HTML del resumen\n}})));setError('');}catch(error){setError('There was a problem fetching the data.');setShows([]);}};console.log(\"shows \"+JSON.stringify(shows));const stripHtmlTags=htmlString=>{// Crear un elemento HTML temporal para eliminar las etiquetas\nconst tempDiv=document.createElement('div');tempDiv.innerHTML=htmlString;return tempDiv.textContent||tempDiv.innerText||'';// Obtener el texto sin etiquetas\n};const categorias=categoria=>{setCategoriaSeleccionada(categoria);// Función para actualizar la categoría seleccionada\nconsole.log(\"categoria\"+JSON.stringify(categoria));};const filtrado=shows.filter(show=>{// Filtrar por categoría seleccionada\nif(categoriaSeleccionada==='Todos'){return true&&show.show.name.toLowerCase().includes(searchValue.toLowerCase());// Mostrar todos si la categoría seleccionada es 'Todos'\n}else{return show.show.genres&&show.show.genres.includes(categoriaSeleccionada)&&show.show.name.toLowerCase().includes(searchValue.toLowerCase());}});return/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(Buscador,{searchValue:searchValue,setSearchValue:setSearchValue}),/*#__PURE__*/_jsx(Categorias,{seleccionarCategoria:categorias}),/*#__PURE__*/_jsx(PeliculasList,{children:/*#__PURE__*/_jsx(Peliculas,{shows:filtrado})})]});}export default App;","map":{"version":3,"names":["React","useEffect","useState","Buscador","Categorias","PeliculasList","Peliculas","fetchMovies","jsx","_jsx","jsxs","_jsxs","defaultPelis","text","complete","App","searchValue","setSearchValue","console","log","movies","setMovies","categoriaSeleccionada","setCategoriaSeleccionada","shows","setShows","error","setError","fetchShows","response1","fetch","response2","ok","Error","data1","json","data2","combinedShows","map","show","summary","stripHtmlTags","JSON","stringify","htmlString","tempDiv","document","createElement","innerHTML","textContent","innerText","categorias","categoria","filtrado","filter","name","toLowerCase","includes","genres","Fragment","children","seleccionarCategoria"],"sources":["C:/Users/jorge/OneDrive/Escritorio/react/Basico/BuscadorPeliculas/Buscador/src/App.js"],"sourcesContent":["//import logo from './logo.svg';\nimport React, { useEffect, useState } from 'react';\nimport { Buscador } from './Buscador';\nimport { Categorias } from './Categorias';\nimport { PeliculasList } from './PeliculasList';\nimport { Peliculas } from './Peliculas';\nimport { fetchMovies } from './servicio';\nimport './App.css';\n\nlet defaultPelis = [\n\n  { text: \"Avengers: Endgame\", complete: true },\n  { text: \"super mario movie\", complete: true },\n  { text: \"scream 5\", complete: false },\n\n]\n\nfunction App() {\n  const [searchValue, setSearchValue] = React.useState('');\n\n  console.log('pruebas del buscador '+ searchValue);\n  \n  const [movies, setMovies] = useState([]);\n  const [categoriaSeleccionada, setCategoriaSeleccionada] = useState('Todos'); // Estado para la categoría seleccionada\n  \n ///////////////////////////////////////////////////\n const [shows, setShows] = useState([]);\n const [error, setError] = useState('');\n\n useEffect(() => {\n     fetchShows();\n }, []); // Empty dependency array to run the effect only once on mount\n\n const fetchShows = async () => {\n     try {\n         const response1 = await fetch(`https://api.tvmaze.com/search/shows?q=series`);\n         const response2 = await fetch(`https://api.tvmaze.com/search/shows?q=movies`);\n         if (!response1.ok || !response2.ok) {\n             throw new Error('Network response was not ok');\n         }\n         const data1 = await response1.json();\n         const data2 = await response2.json();\n         const combinedShows = [...data1, ...data2]; // Combine results of series and movies\n         setShows(combinedShows.map(show => ({\n             ...show,\n             show: {\n                 ...show.show,\n                 summary: stripHtmlTags(show.show.summary) // Limpiar etiquetas HTML del resumen\n             }\n         })));\n         setError('');\n     } catch (error) {\n         setError('There was a problem fetching the data.');\n         setShows([]);\n     }\n };\n\n console.log(\"shows \" + JSON.stringify(shows));\n\n const stripHtmlTags = (htmlString) => {\n     // Crear un elemento HTML temporal para eliminar las etiquetas\n     const tempDiv = document.createElement('div');\n     tempDiv.innerHTML = htmlString;\n     return tempDiv.textContent || tempDiv.innerText || ''; // Obtener el texto sin etiquetas\n };\n\n\n  \n const categorias = (categoria) => {\n  setCategoriaSeleccionada(categoria); // Función para actualizar la categoría seleccionada\n  console.log(\"categoria\" + JSON.stringify(categoria));\n};\n\nconst filtrado = shows.filter(\n  show => {\n    // Filtrar por categoría seleccionada\n    if (categoriaSeleccionada === 'Todos') {\n      return true && show.show.name.toLowerCase().includes(searchValue.toLowerCase()); // Mostrar todos si la categoría seleccionada es 'Todos'\n    } else {\n      return show.show.genres && show.show.genres.includes(categoriaSeleccionada) && show.show.name.toLowerCase().includes(searchValue.toLowerCase());\n    }\n  }\n);\n\n\n\n  return (\n    <React.Fragment>\n\n      <Buscador \n        searchValue={searchValue}\n        setSearchValue={setSearchValue}\n      />  \n\n      <Categorias seleccionarCategoria ={categorias} />     \n\n      <PeliculasList>    \n   \n          <Peliculas  shows={filtrado}/>  \n    \n      </PeliculasList>    \n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}